///
/// NitroMathAutolinking.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

public final class NitroMathAutolinking {
  public typealias bridge = margelo.nitro.nitroMath.bridge.swift

  /**
   * Creates an instance of a Swift class that implements `HybridMathSpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridMathSpecCxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridMath`).
   */
  public static func createMath() -> bridge.std__shared_ptr_margelo__nitro__nitroMath__HybridMathSpec_ {
    let hybridObject = HybridMath()
    return { () -> bridge.std__shared_ptr_margelo__nitro__nitroMath__HybridMathSpec_ in
      let __cxxWrapped = HybridMathSpecCxx(hybridObject)
      let __swiftReferenceId = HybridMathSpecCxxReferenceHolder.put(__cxxWrapped)
      return bridge.create_std__shared_ptr_margelo__nitro__nitroMath__HybridMathSpec_(__swiftReferenceId)
    }()
  }
  
  /**
   * Creates an instance of a Swift class that implements `HybridMQTTSpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridMQTTSpecCxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridMQTT`).
   */
  public static func createMQTT() -> bridge.std__shared_ptr_margelo__nitro__nitroMath__HybridMQTTSpec_ {
    let hybridObject = HybridMQTT()
    return { () -> bridge.std__shared_ptr_margelo__nitro__nitroMath__HybridMQTTSpec_ in
      let __cxxWrapped = HybridMQTTSpecCxx(hybridObject)
      let __swiftReferenceId = HybridMQTTSpecCxxReferenceHolder.put(__cxxWrapped)
      return bridge.create_std__shared_ptr_margelo__nitro__nitroMath__HybridMQTTSpec_(__swiftReferenceId)
    }()
  }
}
