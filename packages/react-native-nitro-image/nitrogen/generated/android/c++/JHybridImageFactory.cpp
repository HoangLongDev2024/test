///
/// JHybridImageFactory.cpp
/// Mon Jul 29 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridImageFactory.hpp"

jni::local_ref<JHybridImageFactory::jhybriddata> JHybridImageFactory::initHybrid(jni::alias_ref<jhybridobject> jThis) {
  return makeCxxInstance(jThis);
}

void JHybridImageFactory::registerNatives() {
  registerHybrid({
    makeNativeMethod("initHybrid", JHybridImageFactory::initHybrid),
  });
}

size_t JHybridImageFactory::getExternalMemorySize() {
  static const auto method = _javaPart->getClass()->getMethod<long()>("getMemorySize");
  return method(_javaPart.get());
}

// Properties


// Methods
std::shared_ptr<HybridImage> JHybridImageFactory::loadImageFromFile(const std::string& path) override {
  static const auto method = _javaPart->getClass()->getMethod<std::shared_ptr<HybridImage>(std::string)>("loadImageFromFile");
  return method(_javaPart.get(), path);
}
std::shared_ptr<HybridImage> JHybridImageFactory::loadImageFromURL(const std::string& path) override {
  static const auto method = _javaPart->getClass()->getMethod<std::shared_ptr<HybridImage>(std::string)>("loadImageFromURL");
  return method(_javaPart.get(), path);
}
std::shared_ptr<HybridImage> JHybridImageFactory::loadImageFromSystemName(const std::string& path) override {
  static const auto method = _javaPart->getClass()->getMethod<std::shared_ptr<HybridImage>(std::string)>("loadImageFromSystemName");
  return method(_javaPart.get(), path);
}
std::shared_ptr<HybridImage> JHybridImageFactory::bounceBack(std::shared_ptr<HybridImage> image) override {
  static const auto method = _javaPart->getClass()->getMethod<std::shared_ptr<HybridImage>(std::shared_ptr<HybridImage>)>("bounceBack");
  return method(_javaPart.get(), image);
}