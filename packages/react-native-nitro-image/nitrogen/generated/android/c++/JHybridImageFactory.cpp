///
/// JHybridImageFactory.cpp
/// Mon Jul 29 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridImageFactory.hpp"
#include "JHybridImage.hpp"

namespace margelo::nitro::image {

  jni::local_ref<JHybridImageFactory::jhybriddata> JHybridImageFactory::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridImageFactory::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridImageFactory::initHybrid),
    });
  }

  size_t JHybridImageFactory::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart.get());
  }

  // Properties
  

  // Methods
  std::shared_ptr<HybridImage> JHybridImageFactory::loadImageFromFile(const std::string& path) {
    static const auto method = _javaPart->getClass()->getMethod<jni::alias_ref<JHybridImage::javaobject>(std::string)>("loadImageFromFile");
    jni::local_ref<JHybridImage::javaobject> jimage = method(_javaPart.get(), path);
    return std::shared_ptr<HybridImage>(jimage->cthis());
  }
  std::shared_ptr<HybridImage> JHybridImageFactory::loadImageFromURL(const std::string& path) {
    static const auto method = _javaPart->getClass()->getMethod<jni::alias_ref<JHybridImage::javaobject>(std::string)>("loadImageFromURL");
    jni::local_ref<JHybridImage::javaobject> jimage = method(_javaPart.get(), path);
    return std::shared_ptr<HybridImage>(jimage->cthis());
  }
  std::shared_ptr<HybridImage> JHybridImageFactory::loadImageFromSystemName(const std::string& path) {
    static const auto method = _javaPart->getClass()->getMethod<jni::alias_ref<JHybridImage::javaobject>(std::string)>("loadImageFromSystemName");
    jni::local_ref<JHybridImage::javaobject> jimage = method(_javaPart.get(), path);
    return std::shared_ptr<HybridImage>(jimage->cthis());
  }
  std::shared_ptr<HybridImage> JHybridImageFactory::bounceBack(std::shared_ptr<HybridImage> image) {
    static const auto method = _javaPart->getClass()->getMethod<jni::alias_ref<JHybridImage::javaobject>(jni::alias_ref<JHybridImage::javaobject>)>("bounceBack");
    auto inJImage = std::dynamic_pointer_cast<JHybridImage>(image);
    jni::local_ref<JHybridImage::javaobject> jimage = method(_javaPart.get(), inJImage->_javaPart);
    return std::shared_ptr<HybridImage>(jimage->cthis());
  }

} // namespace margelo::nitro::image