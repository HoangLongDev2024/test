///
/// HybridTestObjectSpec.cpp
/// Mon Aug 05 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "HybridTestObjectSpec.hpp"

namespace margelo::nitro::image {

  void HybridTestObjectSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybridGetter("numberValue", &HybridTestObjectSpec::getNumberValue, this);
    registerHybridSetter("numberValue", &HybridTestObjectSpec::setNumberValue, this);
    registerHybridGetter("boolValue", &HybridTestObjectSpec::getBoolValue, this);
    registerHybridSetter("boolValue", &HybridTestObjectSpec::setBoolValue, this);
    registerHybridGetter("stringValue", &HybridTestObjectSpec::getStringValue, this);
    registerHybridSetter("stringValue", &HybridTestObjectSpec::setStringValue, this);
    registerHybridGetter("bigintValue", &HybridTestObjectSpec::getBigintValue, this);
    registerHybridSetter("bigintValue", &HybridTestObjectSpec::setBigintValue, this);
    registerHybridGetter("stringOrUndefined", &HybridTestObjectSpec::getStringOrUndefined, this);
    registerHybridSetter("stringOrUndefined", &HybridTestObjectSpec::setStringOrUndefined, this);
    registerHybridGetter("stringOrNull", &HybridTestObjectSpec::getStringOrNull, this);
    registerHybridSetter("stringOrNull", &HybridTestObjectSpec::setStringOrNull, this);
    registerHybridGetter("optionalString", &HybridTestObjectSpec::getOptionalString, this);
    registerHybridSetter("optionalString", &HybridTestObjectSpec::setOptionalString, this);
    registerHybridGetter("valueThatWillThrowOnAccess", &HybridTestObjectSpec::getValueThatWillThrowOnAccess, this);
    registerHybridSetter("valueThatWillThrowOnAccess", &HybridTestObjectSpec::setValueThatWillThrowOnAccess, this);
    registerHybridGetter("someVariant", &HybridTestObjectSpec::getSomeVariant, this);
    registerHybridSetter("someVariant", &HybridTestObjectSpec::setSomeVariant, this);
    registerHybridGetter("someTuple", &HybridTestObjectSpec::getSomeTuple, this);
    registerHybridSetter("someTuple", &HybridTestObjectSpec::setSomeTuple, this);
    registerHybridGetter("self", &HybridTestObjectSpec::getSelf, this);
    registerHybridMethod("simpleFunc", &HybridTestObjectSpec::simpleFunc, this);
    registerHybridMethod("multipleArguments", &HybridTestObjectSpec::multipleArguments, this);
    registerHybridMethod("createMap", &HybridTestObjectSpec::createMap, this);
    registerHybridMethod("mapRoundtrip", &HybridTestObjectSpec::mapRoundtrip, this);
    registerHybridMethod("funcThatThrows", &HybridTestObjectSpec::funcThatThrows, this);
    registerHybridMethod("tryOptionalParams", &HybridTestObjectSpec::tryOptionalParams, this);
    registerHybridMethod("tryMiddleParam", &HybridTestObjectSpec::tryMiddleParam, this);
    registerHybridMethod("passVariant", &HybridTestObjectSpec::passVariant, this);
    registerHybridMethod("flip", &HybridTestObjectSpec::flip, this);
    registerHybridMethod("passTuple", &HybridTestObjectSpec::passTuple, this);
    registerHybridMethod("calculateFibonacciSync", &HybridTestObjectSpec::calculateFibonacciSync, this);
    registerHybridMethod("calculateFibonacciAsync", &HybridTestObjectSpec::calculateFibonacciAsync, this);
    registerHybridMethod("wait", &HybridTestObjectSpec::wait, this);
    registerHybridMethod("callCallback", &HybridTestObjectSpec::callCallback, this);
    registerHybridMethod("getValueFromJSCallback", &HybridTestObjectSpec::getValueFromJSCallback, this);
    registerHybridMethod("getValueFromJSCallbackAndWait", &HybridTestObjectSpec::getValueFromJSCallbackAndWait, this);
    registerHybridMethod("callOneOf", &HybridTestObjectSpec::callOneOf, this);
    registerHybridMethod("getValueFromJsCallback", &HybridTestObjectSpec::getValueFromJsCallback, this);
    registerHybridMethod("getCar", &HybridTestObjectSpec::getCar, this);
    registerHybridMethod("isCarElectric", &HybridTestObjectSpec::isCarElectric, this);
    registerHybridMethod("getDriver", &HybridTestObjectSpec::getDriver, this);
    registerHybridMethod("newTestObject", &HybridTestObjectSpec::newTestObject, this);
  }

} // namespace margelo::nitro::image
