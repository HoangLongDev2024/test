///
/// ImageFactorySpecCxx.swift
/// Mon Jul 22 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges ImageFactorySpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HostObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class ImageFactorySpecCxx {
  private(set) var implementation: ImageFactorySpec

  public init(_ implementation: ImageFactorySpec) {
    self.implementation = implementation
  }

  // Properties
  

  // Methods
  @inline(__always)
  public func loadImageFromFile(path: String) -> ImageFactorySpec_loadImageFromFile_Result {
    do {
      let result = try self.implementation.loadImageFromFile(path: path)
      return .value(ImageSpecCxx(result))
    } catch RuntimeError.error(withMessage: let message) {
      return .error(message: message)
    } catch {
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func loadImageFromURL(path: String) -> ImageFactorySpec_loadImageFromURL_Result {
    do {
      let result = try self.implementation.loadImageFromURL(path: path)
      return .value(ImageSpecCxx(result))
    } catch RuntimeError.error(withMessage: let message) {
      return .error(message: message)
    } catch {
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func loadImageFromSystemName(path: String) -> ImageFactorySpec_loadImageFromSystemName_Result {
    do {
      let result = try self.implementation.loadImageFromSystemName(path: path)
      return .value(ImageSpecCxx(result))
    } catch RuntimeError.error(withMessage: let message) {
      return .error(message: message)
    } catch {
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
}
