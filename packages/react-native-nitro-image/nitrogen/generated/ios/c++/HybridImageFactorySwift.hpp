///
/// HybridImageFactorySwift.hpp
/// Mon Jul 22 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridImageFactory.hpp"
#include "NitroImage-Swift.h"

#include "HybridImageSwift.hpp"

/**
 * The C++ part of ImageFactorySpecCxx.swift.
 */
class HybridImageFactorySwift final: public HybridImageFactory {
public:
  // Constructor from a Swift instance
  explicit HybridImageFactorySwift(NitroImage::ImageFactorySpecCxx swiftPart): HybridImageFactory(), _swiftPart(swiftPart) { }

public:
  // Get the Swift part
  inline NitroImage::ImageFactorySpecCxx getSwiftPart() { return _swiftPart; }

public:
  // Properties
  

public:
  // Methods
  inline std::shared_ptr<HybridImage> loadImageFromFile(const std::string& path) override {
    auto valueOrError = _swiftPart.loadImageFromFile(std::forward<decltype(path)>(path));
    if (valueOrError.isError()) [[unlikely]] {
      throw std::runtime_error(valueOrError.getError());
    }
    auto value = valueOrError.getValue();
    return std::make_shared<HybridImageSwift>(value);
  }
  inline std::shared_ptr<HybridImage> loadImageFromURL(const std::string& path) override {
    auto valueOrError = _swiftPart.loadImageFromURL(std::forward<decltype(path)>(path));
    if (valueOrError.isError()) [[unlikely]] {
      throw std::runtime_error(valueOrError.getError());
    }
    auto value = valueOrError.getValue();
    return std::make_shared<HybridImageSwift>(value);
  }
  inline std::shared_ptr<HybridImage> loadImageFromSystemName(const std::string& path) override {
    auto valueOrError = _swiftPart.loadImageFromSystemName(std::forward<decltype(path)>(path));
    if (valueOrError.isError()) [[unlikely]] {
      throw std::runtime_error(valueOrError.getError());
    }
    auto value = valueOrError.getValue();
    return std::make_shared<HybridImageSwift>(value);
  }

private:
  NitroImage::ImageFactorySpecCxx _swiftPart;
};