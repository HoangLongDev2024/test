import type { ReferenceConvention } from './types/Type.js'

export function createFileMetadataString(filename: string): string {
  const now = new Date()
  return `
///
/// ${filename}
/// ${now.toDateString()}
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© ${now.getFullYear()} Marc Rousavy @ Margelo
///
`.trim()
}

export function withReferenceConvention(
  type: string,
  convention: ReferenceConvention
): string {
  switch (convention) {
    case 'by-value':
      return type
    case 'by-reference':
      return `const ${type}&`
    case 'move':
      return `${type}&&`
  }
}

export function escapeCppName(string: string): string {
  // Replace non-alphanumeric characters with underscores
  let escapedStr = string.replace(/[^a-zA-Z0-9_]/g, '_')

  // Ensure the first character is a letter or underscore
  if (!/^[a-zA-Z_]/.test(escapedStr)) {
    escapedStr = '_' + escapedStr
  }

  return escapedStr
}

export function isNotDuplicate<T>(item: T, index: number, array: T[]): boolean {
  return array.indexOf(item) === index
}
