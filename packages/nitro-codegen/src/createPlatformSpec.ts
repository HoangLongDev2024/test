import type { PlatformSpec } from 'react-native-nitro-modules'
import type { Language, Platform } from './getPlatformSpecs.js'
import {
  ts,
  Type,
  type InterfaceDeclaration,
  type MethodSignature,
  type ParameterDeclaration,
  type PropertySignature,
} from 'ts-morph'
import { getNodeName } from './getNodeName.js'

interface File {
  name: string
  content: string
  language: Language
}

interface CodeNode {
  /**
   * Get the code of this code node (e.g. property, method) in the given language.
   */
  getCode(language: Language): string
  /**
   * Get all extra definition files this code node needs (e.g. extra type/struct declarations
   * for complex types), or `[]` if none are required (e.g. if this uses primitive types only)
   */
  getDefinitionFiles(language: Language): File[]
}

function createFileMetadataString(filename: string): string {
  const now = new Date()
  return `
///
/// ${filename}
/// ${now.toDateString()}
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© ${now.getFullYear()} Marc Rousavy @ Margelo
///
`
}

function capitalizeName(name: string): string {
  return name.charAt(0).toUpperCase() + name.slice(1)
}

function indent(string: string, indentation: string): string {
  return string.replaceAll('\n', `\n${indentation}`)
}

function joinToIndented(array: string[], indentation: string = '    '): string {
  return array.join('\n').replaceAll('\n', `\n${indentation}`)
}

interface CppMethodSignature {
  returnType: TSType | VoidType
  parameters: NamedTSType[]
  rawName: string
  name: string
  type: 'getter' | 'setter' | 'method'
}

interface EnumMember {
  name: string
  value: number
}

class VoidType implements CodeNode {
  constructor() {}

  getCode(): string {
    return 'void'
  }

  getDefinitionFiles(): File[] {
    return []
  }
}

class TSType implements CodeNode {
  readonly type: Type
  readonly isOptional: boolean
  readonly kind: 'primitive' | 'complex'
  private readonly cppName: string
  private readonly extraFiles: File[]

  private readonly baseTypes: TSType[]
  private readonly referencedTypes: TSType[]

  constructor(type: Type, isOptional: boolean) {
    this.type = type
    this.isOptional = isOptional
    this.baseTypes = []
    this.referencedTypes = []
    this.extraFiles = []

    if (type.isBigInt()) {
      this.cppName = 'int64_t'
      this.kind = 'primitive'
    } else if (type.isBoolean()) {
      this.cppName = 'bool'
      this.kind = 'primitive'
    } else if (type.isNull() || type.isUndefined()) {
      this.cppName = 'std::nullptr_t'
      this.kind = 'primitive'
    } else if (type.isNumber()) {
      this.cppName = 'double'
      this.kind = 'primitive'
    } else if (type.isString()) {
      this.cppName = 'std::string'
      this.kind = 'complex'
    } else if (type.isVoid()) {
      this.cppName = 'void'
      this.kind = 'primitive'
    } else if (type.isEnum()) {
      // It is an enum. We need to generate enum interface
      this.kind = 'primitive'
      const typename = type.getSymbolOrThrow().getName()
      this.cppName = typename
      const enumValues: EnumMember[] = []
      const declaration = type.getSymbolOrThrow().getValueDeclarationOrThrow()
      const enumDeclaration = declaration.asKindOrThrow(
        ts.SyntaxKind.EnumDeclaration
      )
      for (const enumMember of enumDeclaration.getMembers()) {
        const name = enumMember.getName()
        const value = enumMember.getValue()
        if (typeof value !== 'number') {
          throw new Error(
            `Enum member ${typename}.${name} is ${value} (${typeof value}), which cannot be represented in C++ enums.\n` +
              `Each enum member must be a number! If you want to use strings, use TypeScript unions ("a" | "b") instead!`
          )
        }
        enumValues.push({
          name: enumMember.getName(),
          value: value,
        })
      }
      const cppEnumMembers = enumValues.map((m) => `${m.name} = ${m.value},`)

      const cppCode = `
${createFileMetadataString(`${typename}.hpp`)}

#pragma once

#include <stddef.h>
#include <NitroModules/JSIConverter.hpp>

enum class ${typename} {
  ${joinToIndented(cppEnumMembers, '  ')}
};

namespace margelo {

  // C++ ${typename} <> JS ${typename} (enum)
  template <> struct JSIConverter<${typename}> {
    static ${typename} fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      int enumValue = JSIConverter<int>::fromJSI(runtime, arg);
      return static_cast<${typename}>(enumValue);
    }
    static jsi::Value toJSI(jsi::Runtime& runtime, ${typename} arg) {
      int enumValue = static_cast<int>(arg);
      return JSIConverter<int>::toJSI(enumValue);
    }
  };

} // namespace margelo
              `
      this.extraFiles.push({
        language: 'c++',
        name: `${typename}.hpp`,
        content: cppCode,
      })
    } else if (type.isUnion()) {
      const symbol = type.getAliasSymbol()
      if (symbol == null) {
        // It is an inline union instead of a separate type declaration!
        throw new Error(
          `Inline union types ("${type.getText()}") are not supported by Nitrogen!\n` +
            `Extract the union to a separate type, and re-run nitrogen!`
        )
      }

      const typename = symbol.getName()
      const enumValues = type.getUnionTypes().map((t) => {
        if (t.isStringLiteral()) {
          return t.getLiteralValueOrThrow()
        } else {
          throw new Error(
            `${typename}: Value "${t.getText()}" is not a string literal - it cannot be represented in a C++ enum!`
          )
        }
      })
      this.kind = 'primitive'
      this.cppName = typename
      const cppEnumMembers = enumValues.map((m) => `${m},`)
      const cppFromJsiIfs = enumValues
        .map((v) =>
          `
if (unionValue == "${v}") {
  return ${typename}::${v};
}
`.trim()
        )
        .join(' else ')
      const cppToJsiCases = enumValues
        .map(
          (v) =>
            `case ${typename}::${v}: return JSIConverter<std::string>(runtime, "${v}");`
        )
        .join('\n')

      const cppCode = `
${createFileMetadataString(`${typename}.hpp`)}

#pragma once

#include <stddef.h>
#include <NitroModules/JSIConverter.hpp>

enum class ${typename} {
  ${joinToIndented(cppEnumMembers, '  ')}
};

namespace margelo {

  // C++ ${typename} <> JS ${typename} (union)
  template <> struct JSIConverter<${typename}> {
    static ${typename} fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(arg);
      ${indent(cppFromJsiIfs, '      ')}
    }
    static jsi::Value toJSI(jsi::Runtime& runtime, ${typename} arg) {
      switch (arg) {
        ${indent(cppToJsiCases, '        ')}
      }
    }
  };

} // namespace margelo
              `
      this.extraFiles.push({
        language: 'c++',
        name: `${typename}.hpp`,
        content: cppCode,
      })
    } else if (type.isObject() || type.isInterface()) {
      // It references another interface/type, either a simple struct, or another HybridObject
      this.kind = 'complex'
      const typename = type.getSymbolOrThrow().getName()

      const isHybridObject = type
        .getBaseTypes()
        .some((t) => t.getText().includes('HybridObject'))

      if (isHybridObject) {
        // It is another HybridObject being referenced!
        this.cppName = `std::shared_ptr<${typename}>`
      } else {
        // It is a simple struct being referenced.
        const cppProperties: NamedTSType[] = []
        for (const prop of type.getProperties()) {
          // recursively resolve types for each property of the referenced type
          const declaration = prop.getValueDeclarationOrThrow()
          const propType = prop.getTypeAtLocation(declaration)
          const refType = new NamedTSType(
            propType,
            prop.isOptional(),
            prop.getName()
          )
          cppProperties.push(refType)
          this.referencedTypes.push(refType)
        }
        const cppStructProps = cppProperties.map(
          (p) => `${p.getCode()} ${p.name};`
        )
        const cppFromJsiProps = cppProperties.map(
          (p) =>
            `.${p.name} = JSIConverter<${p.getCode()}>::fromJSI(runtime, obj.getProperty(runtime, "${p.name}")),`
        )
        const cppToJsiCalls = cppProperties.map(
          (p) =>
            `obj.setProperty(runtime, "${p.name}", JSIConverter<${p.getCode()}>::toJSI(runtime, arg.${p.name}));`
        )

        const extraFiles = this.referencedTypes.flatMap((r) =>
          r.getDefinitionFiles()
        )
        const cppExtraIncludes = extraFiles.map((f) => `#include "${f.name}"`)

        const cppCode = `
${createFileMetadataString(`${typename}.hpp`)}

#pragma once

#include <stddef.h>
#include <string.h>
#include <optional>
#include <NitroModules/JSIConverter.hpp>

${cppExtraIncludes.join('\n')}

struct ${typename} {
public:
  ${joinToIndented(cppStructProps, '  ')}
};

namespace margelo {

  // C++ ${typename} <> JS ${typename} (object)
  template <> struct JSIConverter<${typename}> {
    static ${typename} fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ${typename} {
        ${joinToIndented(cppFromJsiProps, '        ')}
      };
    }
    static jsi::Value toJSI(jsi::Runtime& runtime, const ${typename}& arg) {
      jsi::Object obj(runtime);
      ${joinToIndented(cppToJsiCalls, '      ')}
      return obj;
    }
  };

} // namespace margelo
        `
        this.extraFiles.push({
          language: 'c++',
          name: `${typename}.hpp`,
          content: cppCode,
        })
        this.cppName = typename
      }
    } else {
      throw new Error(
        `The TypeScript type "${type.getText()}" cannot be represented in C++!`
      )
    }
  }

  getCode(): string {
    if (this.isOptional) {
      return `std::optional<${this.cppName}>`
    } else {
      return this.cppName
    }
  }

  getDefinitionFiles(): File[] {
    const extra = this.extraFiles
    const inheritedDefinitionFiles = this.baseTypes.flatMap((b) =>
      b.getDefinitionFiles()
    )
    const referencedDefinitionFiles = this.referencedTypes.flatMap((r) =>
      r.getDefinitionFiles()
    )
    return [...extra, ...inheritedDefinitionFiles, ...referencedDefinitionFiles]
  }
}

class NamedTSType extends TSType {
  readonly name: string

  constructor(type: Type, isOptional: boolean, name: string) {
    super(type, isOptional)
    this.name = name
  }
}

class Property implements CodeNode {
  readonly name: string
  readonly type: NamedTSType
  readonly isReadonly: boolean

  constructor(prop: PropertySignature) {
    this.name = prop.getName()
    this.isReadonly = prop.hasModifier(ts.SyntaxKind.ReadonlyKeyword)
    const type = prop.getTypeNodeOrThrow().getType()
    const isOptional = prop.hasQuestionToken() || type.isNullable()
    this.type = new NamedTSType(type, isOptional, this.name)
  }

  get cppSignatures(): CppMethodSignature[] {
    const signatures: CppMethodSignature[] = []
    const capitalizedName = capitalizeName(this.name)
    // getter
    signatures.push({
      returnType: this.type,
      rawName: this.name,
      name: `get${capitalizedName}`,
      parameters: [],
      type: 'getter',
    })
    if (!this.isReadonly) {
      // setter
      signatures.push({
        returnType: new VoidType(),
        rawName: this.name,
        name: `set${capitalizedName}`,
        parameters: [this.type],
        type: 'setter',
      })
    }
    return signatures
  }

  getDefinitionFiles(): File[] {
    return this.type.getDefinitionFiles()
  }

  getCode(language: Language): string {
    switch (language) {
      case 'c++':
        const signatures = this.cppSignatures
        const codeLines = signatures.map((s) => {
          const params = s.parameters.map((p) => {
            if (p.kind === 'complex') {
              // Complex types can be const& passed
              return `const ${p.getCode()}& ${p.name}`
            } else {
              // Primitive types are just passed by value
              return `${p.getCode()} ${p.name}`
            }
          })
          return `virtual ${s.returnType.getCode()} ${s.name}(${params.join(', ')}) = 0;`
        })
        return codeLines.join('\n')
      default:
        throw new Error(
          `Language ${language} is not yet supported for properties!`
        )
    }
  }
}

class Parameter implements CodeNode {
  readonly name: string
  readonly type: NamedTSType

  constructor(param: ParameterDeclaration) {
    this.name = param.getName()
    const type = param.getTypeNodeOrThrow().getType()
    const isOptional =
      param.hasQuestionToken() || param.isOptional() || type.isNullable()
    this.type = new NamedTSType(type, isOptional, this.name)
  }

  getCode(language: Language): string {
    switch (language) {
      case 'c++':
        return `${this.type.getCode()} ${this.name}`
      default:
        throw new Error(
          `Language ${language} is not yet supported for parameters!`
        )
    }
  }

  getDefinitionFiles(): File[] {
    return this.type.getDefinitionFiles()
  }
}

class Method implements CodeNode {
  readonly name: string
  readonly returnType: TSType
  readonly parameters: Parameter[]

  constructor(prop: MethodSignature) {
    this.name = getNodeName(prop)
    const returnType = prop.getReturnTypeNodeOrThrow()
    const type = returnType.getType()
    const isOptional = type.isNullable()
    this.returnType = new TSType(type, isOptional)
    this.parameters = prop.getParameters().map((p) => new Parameter(p))
  }

  get cppSignature(): CppMethodSignature {
    return {
      rawName: this.name,
      name: this.name,
      returnType: this.returnType,
      parameters: this.parameters.map((p) => p.type),
      type: 'method',
    }
  }

  getCode(language: Language): string {
    switch (language) {
      case 'c++':
        const signature = this.cppSignature
        const params = signature.parameters.map((p) => {
          if (p.kind === 'complex') {
            // Complex types can be const& passed
            return `const ${p.getCode()}& ${p.name}`
          } else {
            // Primitive types are just passed by value
            return `${p.getCode()} ${p.name}`
          }
        })
        return `virtual ${signature.returnType.getCode()} ${signature.name}(${params.join(', ')}) = 0;`
      default:
        throw new Error(
          `Language ${language} is not yet supported for property getters!`
        )
    }
  }

  getDefinitionFiles(): File[] {
    const parametersDefinitionFiles = this.parameters.flatMap((p) =>
      p.getDefinitionFiles()
    )
    const returnTypeDefinitionFiles = this.returnType.getDefinitionFiles()
    return [...returnTypeDefinitionFiles, ...parametersDefinitionFiles]
  }
}

export function createPlatformSpec<
  TPlatform extends Platform,
  TLanguage extends PlatformSpec[TPlatform],
>(
  module: InterfaceDeclaration,
  platform: TPlatform,
  language: TLanguage
): File[] {
  switch (platform) {
    case 'ios':
      switch (language) {
        case 'swift':
          return createAppleSwiftSpec(module)
        case 'c++':
          return createSharedCppSpec(module)
        default:
          throw new Error(`${language} is not supported on ${platform}!`)
      }
    case 'android':
      switch (language) {
        case 'kotlin':
          return createAndroidKotlinSpec(module)
        case 'c++':
          return createSharedCppSpec(module)
        default:
          throw new Error(`${language} is not supported on ${platform}!`)
      }
    default:
      throw new Error(`${platform} is not supported!`)
  }
}

function createSharedCppSpec(module: InterfaceDeclaration): File[] {
  const moduleName = getNodeName(module)
  const cppClassName = `${moduleName}Spec`

  // Properties (getters + setters)
  const properties = module
    .getChildrenOfKind(ts.SyntaxKind.PropertySignature)
    .filter((p) => p.getFirstChildByKind(ts.SyntaxKind.FunctionType) == null)
  const cppProperties = properties.map((p) => new Property(p))

  // Functions
  const functions = module.getChildrenOfKind(ts.SyntaxKind.MethodSignature)
  const cppMethods = functions.map((f) => new Method(f))

  // Extra includes
  const extraDefinitions = [
    ...cppProperties.flatMap((p) => p.getDefinitionFiles()),
    ...cppMethods.flatMap((m) => m.getDefinitionFiles()),
  ]
  const cppExtraIncludes = extraDefinitions.map((d) => `#include "${d.name}"`)

  // Generate the full header / code
  const cppHeaderCode = `
${createFileMetadataString(`${cppClassName}.hpp`)}

#pragma once

#include <stddef.h>
#include <string.h>
#include <NitroModules/HybridObject.hpp>

${cppExtraIncludes.join('\n')}

class ${cppClassName}: public HybridObject {
  public:
    // Constructor
    explicit ${cppClassName}(): HybridObject(TAG) { }

  public:
    // Properties
    ${joinToIndented(cppProperties.map((p) => p.getCode('c++')))}

  public:
    // Methods
    ${joinToIndented(cppMethods.map((m) => m.getCode('c++')))}

  protected:
    // Tag for logging
    static constexpr auto TAG = "${moduleName}";

  private:
    // Hybrid Setup
    void loadHybridMethods() override;
};
    `

  // Each C++ method needs to be registered in the HybridObject - that's getters, setters and normal methods.
  const registrations: string[] = []
  const signatures = [
    ...cppProperties.flatMap((p) => p.cppSignatures),
    ...cppMethods.map((m) => m.cppSignature),
  ]
  for (const signature of signatures) {
    let registerMethod: string
    switch (signature.type) {
      case 'getter':
        registerMethod = 'registerHybridGetter'
        break
      case 'setter':
        registerMethod = 'registerHybridSetter'
        break
      case 'method':
        registerMethod = 'registerHybridMethod'
        break
      default:
        throw new Error(`Invalid C++ Signature Type: ${signature.type}!`)
    }
    registrations.push(
      `${registerMethod}("${signature.rawName}", &${cppClassName}::${signature.name}, this);`
    )
  }

  const cppBodyCode = `
${createFileMetadataString(`${cppClassName}.cpp`)}

#include "${cppClassName}.hpp"

void ${cppClassName}::loadHybridMethods() {
  ${joinToIndented(registrations, '  ')}
}
    `

  const files: File[] = []
  files.push({
    content: cppHeaderCode,
    language: 'c++',
    name: `${cppClassName}.hpp`,
  })
  files.push({
    content: cppBodyCode,
    language: 'c++',
    name: `${cppClassName}.cpp`,
  })
  files.push(...extraDefinitions)
  return files
}

function createAppleSwiftSpec(_module: InterfaceDeclaration): File[] {
  throw new Error(`Swift for Apple/iOS is not yet implemented!`)
}

function createAndroidKotlinSpec(_module: InterfaceDeclaration): File[] {
  throw new Error(`Kotlin for Android is not yet implemented!`)
}
