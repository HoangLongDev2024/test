///
/// NitroMQTTLib-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declarations of C++ defined types
// Forward declaration of `HybridMQTTSpec` to properly resolve imports.
namespace margelo::nitro::mqtt_lib { class HybridMQTTSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridMQTTSpecCxx` to properly resolve imports.
namespace NitroMQTTLib { class HybridMQTTSpecCxx; }

// Include C++ defined types
#include "HybridMQTTSpec.hpp"
#include <functional>
#include <memory>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::mqtt_lib::bridge::swift {

  // pragma MARK: std::function<void(const std::string& /* data */)>
  /**
   * Specialized version of `std::function<void(const std::string&)>`.
   */
  using Func_void_std__string = std::function<void(const std::string& /* data */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * data * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_Wrapper final {
  public:
    explicit Func_void_std__string_Wrapper(const std::function<void(const std::string& /* data */)>& func): _function(func) {}
    explicit Func_void_std__string_Wrapper(std::function<void(const std::string& /* data */)>&& func): _function(std::move(func)) {}
    inline void call(std::string data) const {
      _function(data);
    }
  private:
    std::function<void(const std::string& /* data */)> _function;
  };
  inline Func_void_std__string create_Func_void_std__string(void* NONNULL closureHolder, void(* NONNULL call)(void* NONNULL /* closureHolder */, std::string), void(* NONNULL destroy)(void* NONNULL)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_std__string([sharedClosureHolder, call](const std::string& data) -> void {
      call(sharedClosureHolder.get(), data);
    });
  }
  inline std::shared_ptr<Func_void_std__string_Wrapper> share_Func_void_std__string(const Func_void_std__string& value) {
    return std::make_shared<Func_void_std__string_Wrapper>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::mqtt_lib::HybridMQTTSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::mqtt_lib::HybridMQTTSpec>`.
   */
  using std__shared_ptr_margelo__nitro__mqtt_lib__HybridMQTTSpec_ = std::shared_ptr<margelo::nitro::mqtt_lib::HybridMQTTSpec>;
  std::shared_ptr<margelo::nitro::mqtt_lib::HybridMQTTSpec> create_std__shared_ptr_margelo__nitro__mqtt_lib__HybridMQTTSpec_(void* NONNULL swiftUnsafePointer);
  void* NONNULL get_std__shared_ptr_margelo__nitro__mqtt_lib__HybridMQTTSpec_(std__shared_ptr_margelo__nitro__mqtt_lib__HybridMQTTSpec_ cppType);

} // namespace margelo::nitro::mqtt_lib::bridge::swift
